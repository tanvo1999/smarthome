/*
 * Copyright (c) 2016-present Invertase Limited
 */

import groovy.json.JsonSlurper

class NotifeeJsonTask extends DefaultTask {
  private final static String OUTPUT_FILE_NAME = "config.xml"

  private String buildType
  private String buildFlavor
  private String rootProjectDirectory

  private File jsonFile
  private File outputDirectory

  @OutputDirectory
  File getOutputDirectory() {
    return outputDirectory
  }

  @InputFile
  File getJsonFile() {
    return jsonFile
  }

  @Input
  String getRootProjectDirectory() {
    return rootProjectDirectory
  }

  @Input
  String getBuildType() {
    return buildType
  }

  @Input
  String getBuildFlavor() {
    return buildFlavor
  }

  void setOutputDirectory(File outputDirectory) {
    this.outputDirectory = outputDirectory
  }

  void setJsonFile(File jsonFile) {
    this.jsonFile = jsonFile
  }

  void setRootProjectDirectory(String rootProjectDirectory) {
    this.rootProjectDirectory = rootProjectDirectory
  }

  void setBuildType(String buildType) {
    this.buildType = buildType
  }

  void setBuildFlavor(String buildFlavor) {
    this.buildFlavor = buildFlavor
  }

  @TaskAction
  void action() {
    deleteFolder(outputDirectory)
    if (!outputDirectory.mkdirs()) {
      logWarning("Failed to create folder: ${outputDirectory}")
    }

    Map json
    try {
      json = new JsonSlurper().parseText(jsonFile.text)
    } catch (Exception ignored) {
      logWarning("Failed to parse notifee.config.json found at ${jsonFile.toString()}.")
      logWarning(ignored.toString())
      return
    }

    if (!(json instanceof Map)) {
      logWarning("Invalid notifee.config.json at ${jsonFile.toString()} - the JSON root must be a map value.")
      return
    }

    if (json.android == null) {
      logWarning("The notifee.config.json file at ${jsonFile.toString()} does not contain an 'android'" +
        " map of properties and so importing config will be skipped. If this build is a release build then" +
        " this is most likely not the intended behaviour and you may have issues with licensing.")
      return
    }

    if (!(json.android instanceof Map)) {
      logWarning("Invalid notifee.config.json at ${jsonFile.toString()} - the 'android' key value must be a map value.")
      return
    }

    Map androidMap = json.android
    Map<String, Object> resValues = new TreeMap<>()

    copyPrimitiveValuesFromMap(androidMap, resValues)

    if (androidMap.containsKey(buildType)) {
      copyPrimitiveValuesFromMap(androidMap.get(buildType), resValues)
    }

    if (buildFlavor != null && buildFlavor.length() > 0 && androidMap.containsKey(buildFlavor)) {
      Map valuesForBuildFlavor = androidMap.get(buildFlavor)
      if (valuesForBuildFlavor instanceof Map) {
        copyPrimitiveValuesFromMap(valuesForBuildFlavor, resValues)
        if (valuesForBuildFlavor.containsKey(buildType)) {
          copyPrimitiveValuesFromMap(valuesForBuildFlavor.get(buildType), resValues)
        }
      }
    }

    if (resValues.isEmpty()) {
      return
    }

    File values = new File(outputDirectory, "values")
    if (!values.exists() && !values.mkdirs()) {
      logWarning("Failed to create folder: ${values}")
    }

    new File(values, OUTPUT_FILE_NAME).write(generateResourcesXmlString(resValues))
  }

  private void copyPrimitiveValuesFromMap(Map<String, Object> sourceMap, TreeMap targetMap) {
    if (!(sourceMap instanceof Map)) return
    for (Map.Entry<String, Object> entry : sourceMap.entrySet()) {
      String key = entry.key
      Object value = entry.value

      if (value instanceof String) {
        targetMap.put(key, value)
      } else if (value instanceof Map) {
        // Ignore Maps (as these could be build type or flavor specific objects.
      } else {
        logWarning("Key '$key' in notifee.config.json is an invalid type, skipping value.")
      }
    }
  }

  private void logWarning(String message) {
    getProject().logger.log(LogLevel.WARN, "WARNING:NOTIFEE: ${message}")
  }

  private static String generateResourcesXmlString(
    Map<String, String> values
  ) {
    StringBuilder sb = new StringBuilder(256)

    sb.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<resources>\n")

    for (Map.Entry<String, String> entry : values.entrySet()) {
      String name = entry.getKey()
      name = "notifee_config_$name"
      sb.append("    <string name=\"").append(name).append("\" translatable=\"false\"")
      sb.append(">").append(entry.getValue()).append("</string>\n")
    }

    sb.append("</resources>\n")

    return sb.toString()
  }

  private void deleteFolder(final File folder) {
    if (!folder.exists()) return
    File[] files = folder.listFiles()

    if (files != null) {
      for (final File file : files) {
        if (file.isDirectory()) {
          deleteFolder(file)
        } else {
          if (!file.delete()) {
            logWarning("Failed to delete: ${file}")
          }
        }
      }
    }

    if (!folder.delete()) {
      logWarning("Failed to delete: ${folder}")
    }
  }
}

def registerJsonTaskForProjectVariant(jsonFile, targetProject, targetVariant) {
  File outputDir = targetProject.file("$targetProject.buildDir/generated/res/notifee/$targetVariant.dirName")

  String variantTaskName = "process${targetVariant.name.capitalize()}NotifeeJson";
  String buildTypeName = targetVariant.getBuildType().name;
  String buildFlavorName = targetVariant.flavorName ? targetVariant.flavorName : "";

  NotifeeJsonTask task = targetProject.tasks.findByName(variantTaskName);

  if (!task) {
    task = targetProject.tasks.create(variantTaskName, NotifeeJsonTask)
  }

  task.setBuildType(buildTypeName)

  task.setBuildFlavor(buildFlavorName)

  task.setOutputDirectory(outputDir)

  task.setJsonFile(jsonFile)

  task.setRootProjectDirectory(rootProject.projectDir.toString())

  if (targetVariant.respondsTo("registerGeneratedResFolders")) {
    task.ext.generatedResFolders = targetProject.files(outputDir).builtBy(task)
    targetVariant.registerGeneratedResFolders(task.generatedResFolders)
    if (targetVariant.respondsTo("getMergeResourcesProvider")) {
      targetVariant.mergeResourcesProvider.configure { dependsOn(task) }
    } else {
      targetVariant.mergeResources.dependsOn(task)
    }
  } else {
    targetVariant.registerResGeneratingTask(task, outputDir)
  }
}

def findJsonFileFromRoot() {
  File jsonFile = null
  String fileName = "notifee.config.json"
  File parentDir = rootProject.projectDir

  for (int i = 0; i <= 3; i++) {
    if (parentDir == null) break
    parentDir = parentDir.parentFile
    if (parentDir != null) {
      jsonFile = new File(parentDir, fileName)
      if (jsonFile.exists()) break
      else {
        jsonFile = null
      }
    }
  }

  return jsonFile
}

File configJsonFile = findJsonFileFromRoot()

if (configJsonFile != null) {
  if (project.properties.get('NOTIFEE')) {
    afterEvaluate {
      def appProject
      if (findProject(':app')) {
        appProject = findProject(':app')
      } else if (rootProject.getSubprojects()[0].hasProperty('android') &&
        rootProject.getSubprojects()[0].android.hasProperty('applicationVariants')
      ) {
        appProject = rootProject.getSubprojects()[0]
      } else {
        gradle.buildFinished {
          project.logger.warn("Notifee WARNING: Could not find your 'app' gradle project automatically, you may need to manually apply the notifee-json.gradle script.")
        }
      }
      if (appProject) {
        appProject.android.applicationVariants.all { variant ->
          registerJsonTaskForProjectVariant(configJsonFile, appProject, variant)
        }
      }
    }
  } else {
    android.applicationVariants.all { variant ->
      registerJsonTaskForProjectVariant(configJsonFile, project, variant)
    }
  }
} else {
  rootProject.logger.info ":${project.name} no notifee.config.json found, skipping configuration tasks."
}
